/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.Simulator;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author edrei
 */
public class MainView extends javax.swing.JFrame {

    private DefaultTableModel model;
    private JLabel lbTitulo;
    private JLabel lbMemoria;
    private JLabel lbNombre;
    private JLabel lbInstante;
    private JLabel lbDuracion;
    private JLabel lbTabla;
    private JLabel lbTamañoMemoria;
    private JTextField tfMemoria;
    private JTextField tfNombre;
    private JTextField tfInstante;
    private JTextField tfDuracion;
    private JButton btnAgregarProceso;
    private JButton btnSimular;
    private JTable tabla;
    private JScrollPane scrollPane;

    /**
     * Creates new form MainMenu
     */
    public MainView() {
        initComponents();
        model = new DefaultTableModel();
        tabla = new JTable(model);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnCargarJSON = new javax.swing.JButton();
        btnNuevaSimulacion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Simulador de Memoria Dinamica");

        btnCargarJSON.setText("Cargar Simulación");

        btnNuevaSimulacion.setText("Nueva Simulación");
        btnNuevaSimulacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaSimulacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnNuevaSimulacion)
                            .addComponent(btnCargarJSON))
                        .addGap(72, 72, 72))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(33, 33, 33))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(btnNuevaSimulacion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCargarJSON)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevaSimulacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaSimulacionActionPerformed
        // TODO add your handling code here:
        Simulator sim = new Simulator(PopUpTamañoMemoria());
        boolean tamañoSOValido = false;
        while (!tamañoSOValido) {
            int tamañoSO = PopUpTamañoSO();
            if (sim.memory.sizeInKilobytes > tamañoSO) {
                sim.addSO(tamañoSO);
                tamañoSOValido = true;
            } else {
                JOptionPane.showMessageDialog(null, "El tamaño del sistema operativo es mayor al de la memoria, por favor ingrese un tamaño menor.", "Memoria Insuficiente", JOptionPane.WARNING_MESSAGE);
            }
        }
        PopUpAgregarProceso(sim, model);
    }//GEN-LAST:event_btnNuevaSimulacionActionPerformed

    private int PopUpTamañoMemoria() {

        int tamañoMemoria = 0;
        boolean numeroValido = false;

        while (!numeroValido) {
            String input = JOptionPane.showInputDialog(null, "Ingrese el tamaño de la memoria en KB:", "Tamaño de la memoria", JOptionPane.QUESTION_MESSAGE);
            try {
                tamañoMemoria = Integer.parseInt(input);
                System.out.println("Tamaño de la memoria ingresado: " + tamañoMemoria);
                numeroValido = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido para el tamaño de la memoria.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        return tamañoMemoria;
    }

    private int PopUpTamañoSO() {
        int tamañoSO = 0;
        boolean numeroValido = false;

        while (!numeroValido) {
            String input = JOptionPane.showInputDialog(null, "Ingrese el tamaño del sistema operativo en KB:", "Tamaño del SO", JOptionPane.QUESTION_MESSAGE);
            try {
                tamañoSO = Integer.parseInt(input);
                System.out.println("Tamaño del sistema operativo: " + tamañoSO);
                numeroValido = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido para el tamaño del sistema operativo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        return tamañoSO;
    }

    public void PopUpAgregarProceso(Simulator sim, DefaultTableModel model) {

        JFrame ventana = new JFrame();
        ventana.setVisible(true);
        ventana.setTitle("Agregar Procesos");
        ventana.setSize(450, 700);
        ventana.setLayout(null);

        lbTitulo = new JLabel("Ingrese la informacion del proceso:");
        lbTitulo.setBounds(20, 25, 300, 50);
        ventana.getContentPane().add(lbTitulo);

        lbNombre = new JLabel("Nombre:");
        lbNombre.setBounds(20, 70, 80, 30);
        ventana.getContentPane().add(lbNombre);

        tfNombre = new JTextField();
        tfNombre.setBounds(110, 70, 150, 30);
        ventana.getContentPane().add(tfNombre);

        lbMemoria = new JLabel("Memoria (KB):");
        lbMemoria.setBounds(20, 110, 80, 30);
        ventana.getContentPane().add(lbMemoria);

        tfMemoria = new JTextField();
        tfMemoria.setBounds(110, 110, 150, 30);
        ventana.getContentPane().add(tfMemoria);

        lbInstante = new JLabel("Instante de llegada:");
        lbInstante.setBounds(20, 150, 120, 30);
        ventana.getContentPane().add(lbInstante);

        tfInstante = new JTextField();
        tfInstante.setBounds(150, 150, 110, 30);
        ventana.getContentPane().add(tfInstante);

        lbDuracion = new JLabel("Duración:");
        lbDuracion.setBounds(20, 190, 80, 30);
        ventana.getContentPane().add(lbDuracion);

        lbTamañoMemoria = new JLabel("Tamaño de la memoria: " + sim.memory.sizeInKilobytes + " KB");
        lbTamañoMemoria.setBounds(20, 520, 250, 30);
        ventana.getContentPane().add(lbTamañoMemoria);

        tfDuracion = new JTextField();
        tfDuracion.setBounds(110, 190, 150, 30);
        ventana.getContentPane().add(tfDuracion);

        model.addColumn("Nombre");
        model.addColumn("Memoria KB");
        model.addColumn("Instante de llegada");
        model.addColumn("Duración");

        lbTabla = new JLabel("Tabla de procesos:");
        lbTabla.setBounds(20, 280, 130, 20);
        ventana.getContentPane().add(lbTabla);
        scrollPane = new JScrollPane(tabla);
        scrollPane.setBounds(20, 310, 400, 200);
        ventana.getContentPane().add(scrollPane);

        btnSimular = new JButton("Iniciar Simulación");
        btnSimular.setBounds(140, 580, 150, 30);
        ventana.getContentPane().add(btnSimular);
        btnSimular.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            }
        });

        btnAgregarProceso = new JButton("Agregar Proceso");
        btnAgregarProceso.setBounds(140, 240, 150, 30);
        ventana.getContentPane().add(btnAgregarProceso);
        btnAgregarProceso.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                boolean validacion = true;
                int memoria = 0;
                int instante = 0;
                int duracion = 0;
                if (ValidarNumero(tfMemoria.getText())) {
                    memoria = Integer.parseInt(tfMemoria.getText());
                } else {
                    validacion = false;
                }
                if (ValidarNumero(tfInstante.getText())) {
                    instante = Integer.parseInt(tfInstante.getText());
                } else {
                    validacion = false;
                }
                if (ValidarNumero(tfDuracion.getText())) {
                    duracion = Integer.parseInt(tfDuracion.getText());
                } else {
                    validacion = false;
                }
                String nombre = tfNombre.getText();

                if (validacion) {
                    sim.addProcess(memoria, nombre, instante, duracion);
                    model.addRow(new Object[]{nombre, memoria, instante, duracion});
                    repaint();
                    tfMemoria.setText("");
                    tfNombre.setText("");
                    tfInstante.setText("");
                    tfDuracion.setText("");
                }
            }
        });
    }

    private boolean ValidarNumero(String cadena) {
        boolean numeroValido = false;
        int numero = 0;
        try {
            numero = Integer.parseInt(cadena);
            numeroValido = true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Verificar que solo ingrese numeros en los campos de memoria, instante y duracion.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return numeroValido;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargarJSON;
    private javax.swing.JButton btnNuevaSimulacion;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
